"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuthProvider = void 0;
var createListenersContainer_1 = require("./createListenersContainer");
var createTokenProvider_1 = require("./createTokenProvider");
var isTokenExpired_1 = require("./isTokenExpired");
var tokenUpdater_1 = require("./tokenUpdater");
var useAuth_1 = require("./useAuth");
var createAuthFetch_1 = require("./utils/createAuthFetch");
var defaultStore_1 = require("./utils/defaultStore");
var extractAccessToken_1 = require("./utils/extractAccessToken");
exports.createAuthProvider = function (_a) {
    var _b;
    var _c = _a.storageKey, storageKey = _c === void 0 ? 'REACT_TOKEN_AUTH_KEY' : _c, onUpdateToken = _a.onUpdateToken, onHydratation = _a.onHydratation, _d = _a.storage, storage = _d === void 0 ? defaultStore_1.createDefaultStore((_b = {}, _b[storageKey] = localStorage.getItem(storageKey), _b)) : _d, _e = _a.fetchFunction, fetchFunction = _e === void 0 ? fetch : _e, getAccessToken = _a.getAccessToken, _f = _a.expirationThresholdMillisec, expirationThresholdMillisec = _f === void 0 ? 5000 : _f;
    var listenersContainer = createListenersContainer_1.createListenersContainer();
    var tokenProvider = createTokenProvider_1.createTokenProvider({
        storageKey: storageKey,
        storage: storage,
    });
    var tokenUpdater = onUpdateToken && tokenUpdater_1.createTokenUpdater(onUpdateToken);
    var _session = tokenProvider.getToken();
    var updateSession = function (session) {
        tokenProvider.setToken(session);
        _session = session;
        listenersContainer.notify();
    };
    var login = function (session) { return updateSession(session); };
    var logout = function () { return updateSession(null); };
    var getSessionState = function () { return _session; };
    var getSession = function () { return __awaiter(void 0, void 0, void 0, function () {
        var accessToken, updatedSession;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    accessToken = extractAccessToken_1.extractAccessToken(getSessionState(), getAccessToken);
                    if (!(_session && tokenUpdater && accessToken && isTokenExpired_1.isTokenExpired(accessToken, expirationThresholdMillisec))) return [3 /*break*/, 2];
                    return [4 /*yield*/, tokenUpdater.updateToken(_session)];
                case 1:
                    updatedSession = _a.sent();
                    updateSession(updatedSession);
                    _a.label = 2;
                case 2: return [2 /*return*/, getSessionState()];
            }
        });
    }); };
    var authFetch = createAuthFetch_1.createAuthFetch(function () { return __awaiter(void 0, void 0, void 0, function () { var _a; return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = extractAccessToken_1.extractAccessToken;
                return [4 /*yield*/, getSession()];
            case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent(), getAccessToken])];
        }
    }); }); }, fetchFunction);
    var useAuth = useAuth_1.createUseAuth({
        getSessionState: getSessionState,
        onHydratation: onHydratation,
        listenersContainer: listenersContainer,
    });
    return {
        useAuth: useAuth,
        authFetch: authFetch,
        login: login,
        logout: logout,
        getSession: getSession,
        getSessionState: getSessionState,
    };
};
