import { IAsyncAuthStorage, Maybe, TokenString } from './types';
export interface IAsyncAuthProviderConfig<Session> {
    getAccessToken?: (session: Session) => TokenString;
    storageKey?: string;
    onUpdateToken?: (session: Session) => Promise<Maybe<Session>>;
    onHydratation?: (session: Maybe<Session>) => void;
    storage?: IAsyncAuthStorage;
    fetchFunction?: typeof fetch;
    expirationThresholdMillisec?: number;
}
export interface IAsyncAuthProvider<Session> {
    useAuth: () => [boolean];
    authFetch: typeof fetch;
    login: (session: Session) => Promise<void>;
    logout: () => Promise<void>;
    getSession: () => Promise<Maybe<Session>>;
    getSessionState: () => Maybe<Session>;
    waitInit: () => Maybe<Promise<void>>;
}
export declare const createAsyncAuthProvider: <Session>({ storageKey, onUpdateToken, onHydratation, storage, fetchFunction, getAccessToken, expirationThresholdMillisec, }: IAsyncAuthProviderConfig<Session>) => IAsyncAuthProvider<Session>;
